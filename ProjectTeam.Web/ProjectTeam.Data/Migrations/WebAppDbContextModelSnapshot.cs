// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectTeam.Data;

#nullable disable

namespace ProjectTeam.Data.Migrations
{
    [DbContext(typeof(WebAppDbContext))]
    partial class WebAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjectTeam.Data.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("AppRoleId")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("BlockedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BlockedTo")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varbinary(200)");

                    b.Property<string>("PhoneNumber1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhoneNumber2")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("AppUser", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Thành phố Hồ Chí Minh",
                            AppRoleId = -1,
                            CreatedBy = -1,
                            CreatedDate = new DateTime(2021, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin_test@gmail.com",
                            FullName = "Nguyen ProVip123",
                            PasswordHash = new byte[] { 48, 226, 96, 96, 76, 33, 214, 6, 74, 243, 83, 180, 197, 163, 246, 179, 156, 220, 166, 136, 166, 232, 55, 26, 17, 11, 227, 231, 48, 210, 176, 78, 126, 202, 227, 98, 193, 46, 102, 2, 23, 157, 38, 45, 155, 53, 129, 129, 153, 77, 44, 125, 162, 45, 57, 173, 138, 174, 232, 233, 89, 138, 191, 34 },
                            PasswordSalt = new byte[] { 8, 192, 75, 70, 93, 207, 45, 92, 60, 234, 110, 72, 167, 99, 25, 186, 161, 227, 180, 42, 80, 30, 117, 100, 124, 169, 249, 11, 69, 182, 43, 192, 56, 48, 72, 236, 9, 194, 132, 42, 81, 22, 205, 164, 112, 150, 148, 252, 111, 128, 78, 210, 165, 41, 31, 90, 33, 114, 49, 42, 51, 62, 108, 2, 212, 52, 247, 130, 46, 189, 214, 73, 14, 109, 150, 29, 249, 149, 239, 31, 14, 215, 75, 38, 12, 169, 12, 238, 167, 16, 29, 206, 138, 138, 223, 198, 144, 184, 177, 85, 235, 25, 87, 149, 200, 54, 130, 156, 1, 15, 143, 115, 73, 30, 199, 9, 77, 14, 21, 60, 162, 90, 15, 157, 214, 102, 13, 124 },
                            PhoneNumber1 = "0939002144",
                            PhoneNumber2 = "0939002144",
                            UpdatedBy = -1,
                            UpdatedDate = new DateTime(2021, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "admin"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
